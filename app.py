
# app.py (Vers√£o FINAL e Definitiva: Fluxo UX Restaurado e Est√°vel)
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from typing import Any, Dict, List, Optional, Tuple
import re
import io
import os
from agente_core import run_agent
from memory import get_conclusions
from dotenv import load_dotenv
load_dotenv()


load_dotenv()


# Importa o agente principal e a fun√ß√£o de mem√≥ria

# ==============================
# Config e Header
# ==============================
st.set_page_config(
    page_title="Agentes Aut√¥nomos de Intelig√™ncia Artificial ‚Äî I2A2",
    page_icon="ü§ñ",
    layout="wide",
)

TITLE = "Agentes Aut√¥nomos de Intelig√™ncia Artificial ‚Äî I2A2"
AUTHOR = "Mauro de Oliveira"

# ------------------ Estado ------------------
if "df" not in st.session_state:
    st.session_state.df: Optional[pd.DataFrame] = None
if "log" not in st.session_state:
    st.session_state.log: List[Dict[str, Any]] = []
if "user_name" not in st.session_state:
    st.session_state.user_name: Optional[str] = None
if "ask_name_submitted" not in st.session_state:
    st.session_state.ask_name_submitted = False
if "initial_greeting_sent" not in st.session_state:
    st.session_state.initial_greeting_sent = False
if "csv_uploaded_once" not in st.session_state:
    # Novo flag para controlar a sauda√ß√£o p√≥s-CSV
    st.session_state.csv_uploaded_once = False

# ------------------ Helpers ------------------


def polite_greeting() -> str:
    nome = st.session_state.user_name or "usu√°rio"
    return f"Ol√°, {nome}! Voc√™ pode me perguntar sobre nulos, correla√ß√£o, histogramas ou conclus√µes."


def polite_farewell(question: str) -> str:
    nome = st.session_state.user_name
    t = (question or "").lower()
    if any(p in t for p in ["obrigado", "obrigada", "valeu"]):
        return (f"De nada, **{nome}**! Fico feliz em ajudar. üëã") if nome else "De nada! Fico feliz em ajudar. üëã"
    return (f"At√© mais, **{nome}**! Qualquer coisa, √© s√≥ chamar. üëã") if nome else "At√© mais! Qualquer coisa, √© s√≥ chamar. üëã"


def get_example_questions() -> str:
    # A lista de perguntas que o outro bot removeu (e que voc√™ quer de volta!)
    return (
        "Aqui est√£o exemplos de algumas perguntas que voc√™ pode fazer:\n"
        "‚Ä¢ Existem nulos?\n"
        "‚Ä¢ Quais os dtypes?\n"
        "‚Ä¢ Quantas linhas e colunas tem?\n"
        "‚Ä¢ Mostre a matriz de correla√ß√£o\n"
        "‚Ä¢ Gere histogramas com 15 intervalos\n"
        "‚Ä¢ Qual a m√©dia da coluna 'V1'?\n"
        "‚Ä¢ **Quais s√£o as conclus√µes?** (Pergunta obrigat√≥ria)"
    )


def build_markdown_report() -> str:
    df = st.session_state.df
    lines = [f"# {TITLE}", f"**Autor:** {AUTHOR}", "", "## 1. Stack",
             "- Python, Streamlit (UI), Pandas/Numpy (EDA), Matplotlib (gr√°ficos).", "", "## 2. Dataset",]
    if df is not None:
        lines.append(
            f"- Linhas: **{df.shape[0]}** | Colunas: **{df.shape[1]}**")
        lines.append(f"- Colunas: {', '.join(map(str, df.columns))}")
    else:
        lines.append("- (Nenhum CSV carregado.)")

    lines += ["",
              "## 3. Perguntas-Exemplo e Respostas (trechos do hist√≥rico)",]
    shown = 0
    for i, item in enumerate(st.session_state.log):
        if item.get("role") == "user" and shown < 4:
            if i + 1 < len(st.session_state.log):
                nxt = st.session_state.log[i + 1]
                if nxt.get("role") == "assistant" and nxt.get("out") and "error" not in nxt["out"]:
                    lines.append(f"- **Pergunta**: {item.get('q', '')}")
                    ans = str(nxt['out'].get(
                        'result', 'Resposta complexa (ver gr√°fico/tabela).'))
                    lines.append(
                        f"  **Resposta**: {ans[:120]}{'...' if len(ans) > 120 else ''}")
                    shown += 1

    lines += ["", "## 4. Conclus√µes do agente (Resposta Obrigat√≥ria)"]
    try:
        conclusions = get_conclusions()
    except Exception:
        conclusions = []

    if conclusions:
        for c in conclusions:
            lines.append(f"- {c}")
    else:
        lines.append(
            "- Sem conclus√µes salvas. Rode an√°lises (correla√ß√£o/insights).")

    lines += ["", "---", "_Relat√≥rio gerado automaticamente pelo agente._"]
    return "\n".join(lines)


def render_assistant_message(out: Dict[str, Any], fig_bytes: Optional[bytes]):
    """Renderiza a sa√≠da do agente."""
    if not out:
        return

    if "error" in out:
        st.error(out["error"])
    elif "table" in out:
        st.markdown(out.get("result", ""))
        st.dataframe(out["table"], width="stretch")
    elif "result" in out:
        st.markdown(out["result"])

    if fig_bytes:
        st.image(fig_bytes, width="stretch")

# ------------------ Layout Principal ------------------


st.subheader(TITLE)
st.caption(f"Autor: **{AUTHOR}**")
st.markdown("---")


# --- Sidebar ---
with st.sidebar:
    st.header("Entrada de Dados")
    csv = st.file_uploader("Envie um CSV", type=["csv"])

    # Carregar CSV (L√≥gica de upload aprimorada)
    if csv is not None:
        try:
            df = pd.read_csv(csv)
            # Verifica se √© um NOVO CSV
            if st.session_state.df is None or st.session_state.df.shape != df.shape or not st.session_state.df.head(1).equals(df.head(1)):
                st.session_state.df = df
                st.session_state.log.clear()  # Limpa o log se um novo arquivo for carregado
                st.session_state.initial_greeting_sent = False  # Reseta a sauda√ß√£o
                st.session_state.csv_uploaded_once = True  # Marca que o upload foi feito

            st.success(
                f"CSV carregado: **{df.shape[0]} linhas** √ó **{df.shape[1]} colunas**.")
            st.dataframe(df.head(), use_container_width=True,
                         height=180)  # Pr√©via na Sidebar
        except Exception as e:
            st.error(f"Erro ao ler CSV: {e}")
            st.session_state.df = None
    else:
        st.session_state.df = st.session_state.get("df")

    st.markdown("---")
    # LISTA DE PERGUNTAS NA SIDEBAR (Para refer√™ncia r√°pida)
    st.markdown("**Exemplos de perguntas:**")
    st.markdown(get_example_questions())
    st.markdown("---")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üßπ Limpar Conversa", use_container_width="stretch"):
            st.session_state.log.clear()
            st.session_state.initial_greeting_sent = False
            st.rerun()
    with col2:
        if st.button("üîÑ Recarregar App", use_container_width="stretch"):
            st.rerun()

# --- Tratamento de Nome (Formul√°rio no In√≠cio) ---
if st.session_state.user_name is None and not st.session_state.ask_name_submitted:
    with st.container(border=True):
        st.markdown("üëã **Bem-vindo! Antes de come√ßar, como devo te chamar?**")
        with st.form("name_form"):
            name_input = st.text_input(
                "Seu nome", placeholder="Ex.: Mauro de Oliveira")
            submitted = st.form_submit_button("Confirmar")
            if submitted:
                if name_input:
                    st.session_state.user_name = name_input.strip()
                    st.session_state.ask_name_submitted = True
                    st.rerun()
                else:
                    st.error("Por favor, digite seu nome.")

    if st.session_state.user_name is None:
        st.stop()


# --- Sauda√ß√µes e Mensagens Iniciais no Chat Log ---

# 1. Sauda√ß√£o Inicial (Ap√≥s o nome)
if len(st.session_state.log) == 0 and st.session_state.user_name and not st.session_state.csv_uploaded_once:
    # Mensagem √önica com instru√ß√£o para subir o CSV
    initial_msg = (
        f"Ol√°, **{st.session_state.user_name}**! üëã Sou seu Agente de EDA.\n\n"
        f"**Para come√ßar**, por favor, **suba um arquivo CSV na barra lateral**."
    )
    st.session_state.log.append(
        {"role": "assistant", "out": {"result": initial_msg}})
    st.session_state.initial_greeting_sent = True
# Se for a primeira sauda√ß√£o, manda tamb√©m exemplos
if len(st.session_state.log) == 0 and not st.session_state.initial_greeting_sent:
    st.session_state.log.append({"role": "assistant", "out": {
        "result": f"Ol√°, **{st.session_state.user_name}**! üëã "
        f"Sou seu Agente de EDA. Por favor, envie um CSV na barra lateral e comece a perguntar."
    }})

    exemplos = (
        "Aqui est√£o algumas perguntas que voc√™ pode fazer:\n"
        "- Existem nulos?\n"
        "- Quais os dtypes?\n"
        "- Quantas linhas e colunas tem?\n"
        "- Mostre a matriz de correla√ß√£o\n"
        "- Gere histogramas com 15 intervalos\n"
        "- Quais s√£o as conclus√µes?"
    )
    st.session_state.log.append(
        {"role": "assistant", "out": {"result": exemplos}})
    st.session_state.initial_greeting_sent = True

# 2. Mensagem P√≥s-Upload (Com a lista de perguntas)
if st.session_state.csv_uploaded_once and len(st.session_state.log) == 1:
    # Limpa o log e coloca a mensagem de pronto para perguntar
    st.session_state.log.clear()

    post_upload_msg = (
        f"‚úÖ **CSV carregado e pronto para an√°lise, {st.session_state.user_name}!**\n\n"
        f"Agora voc√™ pode me fazer perguntas.\n\n"
        f"{get_example_questions()}"
    )
    st.session_state.log.append(
        {"role": "assistant", "out": {"result": post_upload_msg}})
    st.session_state.csv_uploaded_once = False  # Reseta para n√£o entrar mais aqui
    st.rerun()


# --- Hist√≥rico e Renderiza√ß√£o ---
for item in st.session_state.log:
    role = item.get("role", "user")
    with st.chat_message(role):
        if role == "user":
            st.write(item.get("q", ""))
        else:
            render_assistant_message(
                item.get("out", {}), item.get("fig_bytes"))

# --- Relat√≥rio ---
with st.expander("üìÑ Gerar relat√≥rio (Markdown)"):
    if st.session_state.df is None:
        st.info("Envie um CSV para gerar o relat√≥rio.")
    else:
        md = build_markdown_report()
        st.code(md, language="markdown")
        st.download_button("‚¨áÔ∏è Baixar relat√≥rio.md", data=md.encode(
            "utf-8"), file_name="relatorio_agente_i2a2.md")


# --- Input de Chat (rodap√© fixo) ---
user_text = st.chat_input(polite_greeting())

if user_text:

    # 1. Registro da pergunta do usu√°rio
    st.session_state.log.append({"role": "user", "q": user_text})
    df = st.session_state.df

    # 2. Resposta r√°pida (sauda√ß√£o/despedida)
    if re.search(r"\b(tchau|obrigad[ao]|valeu|bye|at√©\s+logo|at√©\s+mais)\b", user_text.lower()):
        st.session_state.log.append(
            {"role": "assistant", "out": {"result": polite_farewell(user_text)}})
        st.rerun()

    # 3. Tratamento de CSV ausente
    if df is None:
        st.session_state.log.append({"role": "assistant", "out": {
                                    "result": "Para te responder, por favor envie um arquivo **CSV** na barra lateral. üòâ"}, })
        st.rerun()

    # 4. Execu√ß√£o do Agente Principal
    with st.spinner("Gerando resposta..."):
        try:
            out, fig = run_agent(user_text, df)
        except Exception as e:
            out = {"error": f"Erro inesperado no Agente Core: {e}"}
            fig = None

    # 5. Converte figura para bytes para salvar no log (hist√≥rico)
    fig_bytes = None
    if fig is not None:
        buf = io.BytesIO()
        fig.savefig(buf, format="png", bbox_inches="tight")
        buf.seek(0)
        fig_bytes = buf.read()
        plt.close(fig)

    # 6. Salva a resposta no log e recarrega
    st.session_state.log.append(
        {"role": "assistant", "out": out, "fig_bytes": fig_bytes})
    st.rerun()
